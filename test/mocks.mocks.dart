// Mocks generated by Mockito 5.4.4 from annotations
// in demo_qr_scanner/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;
import 'dart:ui' as _i6;

import 'package:connectivity_plus/connectivity_plus.dart' as _i12;
import 'package:connectivity_plus_platform_interface/connectivity_plus_platform_interface.dart'
    as _i13;
import 'package:demo_qr_scanner/core/database/app_database.dart' as _i11;
import 'package:demo_qr_scanner/core/services/getx_navigation_service.dart'
    as _i8;
import 'package:demo_qr_scanner/core/services/localization_service.dart'
    as _i20;
import 'package:demo_qr_scanner/core/services/snackbar_service.dart' as _i19;
import 'package:demo_qr_scanner/features/attendance/domain/repositories/attendance_repository.dart'
    as _i22;
import 'package:demo_qr_scanner/features/attendance/domain/services/attendance_service.dart'
    as _i10;
import 'package:demo_qr_scanner/l10n/app_localizations.dart' as _i21;
import 'package:flutter/foundation.dart' as _i3;
import 'package:flutter/src/widgets/framework.dart' as _i4;
import 'package:flutter/widgets.dart' as _i2;
import 'package:mobile_scanner/src/enums/barcode_format.dart' as _i17;
import 'package:mobile_scanner/src/enums/camera_facing.dart' as _i16;
import 'package:mobile_scanner/src/enums/detection_speed.dart' as _i15;
import 'package:mobile_scanner/src/mobile_scanner_controller.dart' as _i14;
import 'package:mobile_scanner/src/objects/barcode_capture.dart' as _i18;
import 'package:mobile_scanner/src/objects/mobile_scanner_state.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeForm_0 extends _i1.SmartFake implements _i2.Form {
  _FakeForm_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeBuildContext_1 extends _i1.SmartFake implements _i4.BuildContext {
  _FakeBuildContext_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_2 extends _i1.SmartFake implements _i4.Widget {
  _FakeWidget_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_3 extends _i1.SmartFake
    implements _i3.DiagnosticsNode {
  _FakeDiagnosticsNode_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i3.TextTreeConfiguration? parentConfiguration,
    _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info,
  }) =>
      super.toString();
}

class _FakeMobileScannerState_4 extends _i1.SmartFake
    implements _i5.MobileScannerState {
  _FakeMobileScannerState_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GlobalKey].
///
/// See the documentation for Mockito's code generation for more information.
class MockFormStateKey extends _i1.Mock
    implements _i4.GlobalKey<_i2.FormState> {}

/// A class which mocks [FormState].
///
/// See the documentation for Mockito's code generation for more information.
class MockFormState extends _i1.Mock implements _i2.FormState {
  @override
  _i2.Form get widget => (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeForm_0(
          this,
          Invocation.getter(#widget),
        ),
        returnValueForMissingStub: _FakeForm_0(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i2.Form);

  @override
  _i4.BuildContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeBuildContext_1(
          this,
          Invocation.getter(#context),
        ),
        returnValueForMissingStub: _FakeBuildContext_1(
          this,
          Invocation.getter(#context),
        ),
      ) as _i4.BuildContext);

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.Widget build(_i4.BuildContext? context) => (super.noSuchMethod(
        Invocation.method(
          #build,
          [context],
        ),
        returnValue: _FakeWidget_2(
          this,
          Invocation.method(
            #build,
            [context],
          ),
        ),
        returnValueForMissingStub: _FakeWidget_2(
          this,
          Invocation.method(
            #build,
            [context],
          ),
        ),
      ) as _i4.Widget);

  @override
  void save() => super.noSuchMethod(
        Invocation.method(
          #save,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void reset() => super.noSuchMethod(
        Invocation.method(
          #reset,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool validate() => (super.noSuchMethod(
        Invocation.method(
          #validate,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  Set<_i2.FormFieldState<Object?>> validateGranularly() => (super.noSuchMethod(
        Invocation.method(
          #validateGranularly,
          [],
        ),
        returnValue: <_i2.FormFieldState<Object?>>{},
        returnValueForMissingStub: <_i2.FormFieldState<Object?>>{},
      ) as Set<_i2.FormFieldState<Object?>>);

  @override
  void initState() => super.noSuchMethod(
        Invocation.method(
          #initState,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didUpdateWidget(_i2.Form? oldWidget) => super.noSuchMethod(
        Invocation.method(
          #didUpdateWidget,
          [oldWidget],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void reassemble() => super.noSuchMethod(
        Invocation.method(
          #reassemble,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setState(_i6.VoidCallback? fn) => super.noSuchMethod(
        Invocation.method(
          #setState,
          [fn],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void deactivate() => super.noSuchMethod(
        Invocation.method(
          #deactivate,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void activate() => super.noSuchMethod(
        Invocation.method(
          #activate,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didChangeDependencies() => super.noSuchMethod(
        Invocation.method(
          #didChangeDependencies,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void debugFillProperties(_i3.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(
        Invocation.method(
          #debugFillProperties,
          [properties],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();

  @override
  String toStringShort() => (super.noSuchMethod(
        Invocation.method(
          #toStringShort,
          [],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #toStringShort,
            [],
          ),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #toStringShort,
            [],
          ),
        ),
      ) as String);

  @override
  _i3.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i3.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toDiagnosticsNode,
          [],
          {
            #name: name,
            #style: style,
          },
        ),
        returnValue: _FakeDiagnosticsNode_3(
          this,
          Invocation.method(
            #toDiagnosticsNode,
            [],
            {
              #name: name,
              #style: style,
            },
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_3(
          this,
          Invocation.method(
            #toDiagnosticsNode,
            [],
            {
              #name: name,
              #style: style,
            },
          ),
        ),
      ) as _i3.DiagnosticsNode);
}

/// A class which mocks [GetxNavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetxNavigationService extends _i1.Mock
    implements _i8.GetxNavigationService {
  @override
  _i9.Future<T?>? toNamed<T>(
    String? pageName, {
    dynamic arguments,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toNamed,
          [pageName],
          {#arguments: arguments},
        ),
        returnValueForMissingStub: null,
      ) as _i9.Future<T?>?);

  @override
  void back<T>({T? result}) => super.noSuchMethod(
        Invocation.method(
          #back,
          [],
          {#result: result},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<T?>? offNamed<T>(
    String? pageName, {
    dynamic arguments,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #offNamed,
          [pageName],
          {#arguments: arguments},
        ),
        returnValueForMissingStub: null,
      ) as _i9.Future<T?>?);

  @override
  _i9.Future<T?>? offAllNamed<T>(
    String? pageName, {
    dynamic arguments,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #offAllNamed,
          [pageName],
          {#arguments: arguments},
        ),
        returnValueForMissingStub: null,
      ) as _i9.Future<T?>?);
}

/// A class which mocks [AttendanceService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAttendanceService extends _i1.Mock implements _i10.AttendanceService {
  @override
  _i9.Future<void> saveAttendanceRecord(
          _i11.AttendanceRecordsCompanion? entry) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveAttendanceRecord,
          [entry],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<List<_i11.AttendanceRecord>> getAllAttendanceRecords() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllAttendanceRecords,
          [],
        ),
        returnValue: _i9.Future<List<_i11.AttendanceRecord>>.value(
            <_i11.AttendanceRecord>[]),
        returnValueForMissingStub:
            _i9.Future<List<_i11.AttendanceRecord>>.value(
                <_i11.AttendanceRecord>[]),
      ) as _i9.Future<List<_i11.AttendanceRecord>>);

  @override
  _i9.Future<List<_i11.AttendanceRecord>> getUnsyncedAttendanceRecords() =>
      (super.noSuchMethod(
        Invocation.method(
          #getUnsyncedAttendanceRecords,
          [],
        ),
        returnValue: _i9.Future<List<_i11.AttendanceRecord>>.value(
            <_i11.AttendanceRecord>[]),
        returnValueForMissingStub:
            _i9.Future<List<_i11.AttendanceRecord>>.value(
                <_i11.AttendanceRecord>[]),
      ) as _i9.Future<List<_i11.AttendanceRecord>>);

  @override
  _i9.Future<void> markAsSynced(_i11.AttendanceRecord? record) =>
      (super.noSuchMethod(
        Invocation.method(
          #markAsSynced,
          [record],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i1.Mock implements _i12.Connectivity {
  @override
  _i9.Stream<List<_i13.ConnectivityResult>> get onConnectivityChanged =>
      (super.noSuchMethod(
        Invocation.getter(#onConnectivityChanged),
        returnValue: _i9.Stream<List<_i13.ConnectivityResult>>.empty(),
        returnValueForMissingStub:
            _i9.Stream<List<_i13.ConnectivityResult>>.empty(),
      ) as _i9.Stream<List<_i13.ConnectivityResult>>);

  @override
  _i9.Future<List<_i13.ConnectivityResult>> checkConnectivity() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkConnectivity,
          [],
        ),
        returnValue: _i9.Future<List<_i13.ConnectivityResult>>.value(
            <_i13.ConnectivityResult>[]),
        returnValueForMissingStub:
            _i9.Future<List<_i13.ConnectivityResult>>.value(
                <_i13.ConnectivityResult>[]),
      ) as _i9.Future<List<_i13.ConnectivityResult>>);
}

/// A class which mocks [MobileScannerController].
///
/// See the documentation for Mockito's code generation for more information.
class MockMobileScannerController extends _i1.Mock
    implements _i14.MobileScannerController {
  @override
  bool get autoStart => (super.noSuchMethod(
        Invocation.getter(#autoStart),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i15.DetectionSpeed get detectionSpeed => (super.noSuchMethod(
        Invocation.getter(#detectionSpeed),
        returnValue: _i15.DetectionSpeed.noDuplicates,
        returnValueForMissingStub: _i15.DetectionSpeed.noDuplicates,
      ) as _i15.DetectionSpeed);

  @override
  int get detectionTimeoutMs => (super.noSuchMethod(
        Invocation.getter(#detectionTimeoutMs),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i16.CameraFacing get facing => (super.noSuchMethod(
        Invocation.getter(#facing),
        returnValue: _i16.CameraFacing.front,
        returnValueForMissingStub: _i16.CameraFacing.front,
      ) as _i16.CameraFacing);

  @override
  List<_i17.BarcodeFormat> get formats => (super.noSuchMethod(
        Invocation.getter(#formats),
        returnValue: <_i17.BarcodeFormat>[],
        returnValueForMissingStub: <_i17.BarcodeFormat>[],
      ) as List<_i17.BarcodeFormat>);

  @override
  bool get returnImage => (super.noSuchMethod(
        Invocation.getter(#returnImage),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get torchEnabled => (super.noSuchMethod(
        Invocation.getter(#torchEnabled),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get useNewCameraSelector => (super.noSuchMethod(
        Invocation.getter(#useNewCameraSelector),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i9.Stream<_i18.BarcodeCapture> get barcodes => (super.noSuchMethod(
        Invocation.getter(#barcodes),
        returnValue: _i9.Stream<_i18.BarcodeCapture>.empty(),
        returnValueForMissingStub: _i9.Stream<_i18.BarcodeCapture>.empty(),
      ) as _i9.Stream<_i18.BarcodeCapture>);

  @override
  _i5.MobileScannerState get value => (super.noSuchMethod(
        Invocation.getter(#value),
        returnValue: _FakeMobileScannerState_4(
          this,
          Invocation.getter(#value),
        ),
        returnValueForMissingStub: _FakeMobileScannerState_4(
          this,
          Invocation.getter(#value),
        ),
      ) as _i5.MobileScannerState);

  @override
  set value(_i5.MobileScannerState? newValue) => super.noSuchMethod(
        Invocation.setter(
          #value,
          newValue,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i9.Future<_i18.BarcodeCapture?> analyzeImage(String? path) =>
      (super.noSuchMethod(
        Invocation.method(
          #analyzeImage,
          [path],
        ),
        returnValue: _i9.Future<_i18.BarcodeCapture?>.value(),
        returnValueForMissingStub: _i9.Future<_i18.BarcodeCapture?>.value(),
      ) as _i9.Future<_i18.BarcodeCapture?>);

  @override
  _i4.Widget buildCameraView() => (super.noSuchMethod(
        Invocation.method(
          #buildCameraView,
          [],
        ),
        returnValue: _FakeWidget_2(
          this,
          Invocation.method(
            #buildCameraView,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeWidget_2(
          this,
          Invocation.method(
            #buildCameraView,
            [],
          ),
        ),
      ) as _i4.Widget);

  @override
  _i9.Future<void> resetZoomScale() => (super.noSuchMethod(
        Invocation.method(
          #resetZoomScale,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> setZoomScale(double? zoomScale) => (super.noSuchMethod(
        Invocation.method(
          #setZoomScale,
          [zoomScale],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> start({_i16.CameraFacing? cameraDirection}) =>
      (super.noSuchMethod(
        Invocation.method(
          #start,
          [],
          {#cameraDirection: cameraDirection},
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> stop() => (super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> switchCamera() => (super.noSuchMethod(
        Invocation.method(
          #switchCamera,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> toggleTorch() => (super.noSuchMethod(
        Invocation.method(
          #toggleTorch,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> updateScanWindow(_i6.Rect? window) => (super.noSuchMethod(
        Invocation.method(
          #updateScanWindow,
          [window],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SnackbarService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSnackbarService extends _i1.Mock implements _i19.SnackbarService {
  @override
  void showSnackbar(
    String? title,
    String? message,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #showSnackbar,
          [
            title,
            message,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LocalizationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalizationService extends _i1.Mock
    implements _i20.LocalizationService {
  @override
  String get snackbarSuccessTitle => (super.noSuchMethod(
        Invocation.getter(#snackbarSuccessTitle),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#snackbarSuccessTitle),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#snackbarSuccessTitle),
        ),
      ) as String);

  @override
  String get snackbarAttendanceRecorded => (super.noSuchMethod(
        Invocation.getter(#snackbarAttendanceRecorded),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#snackbarAttendanceRecorded),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#snackbarAttendanceRecorded),
        ),
      ) as String);

  @override
  String get snackbarErrorTitle => (super.noSuchMethod(
        Invocation.getter(#snackbarErrorTitle),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#snackbarErrorTitle),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#snackbarErrorTitle),
        ),
      ) as String);

  @override
  String get snackbarInvalidQrCodeFormat => (super.noSuchMethod(
        Invocation.getter(#snackbarInvalidQrCodeFormat),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#snackbarInvalidQrCodeFormat),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#snackbarInvalidQrCodeFormat),
        ),
      ) as String);
}

/// A class which mocks [AppLocalizations].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLocalizations extends _i1.Mock implements _i21.AppLocalizations {
  @override
  String get localeName => (super.noSuchMethod(
        Invocation.getter(#localeName),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#localeName),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#localeName),
        ),
      ) as String);

  @override
  String get appTitle => (super.noSuchMethod(
        Invocation.getter(#appTitle),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#appTitle),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#appTitle),
        ),
      ) as String);

  @override
  String get qrScannerScreenTitle => (super.noSuchMethod(
        Invocation.getter(#qrScannerScreenTitle),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#qrScannerScreenTitle),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#qrScannerScreenTitle),
        ),
      ) as String);

  @override
  String get detailsScreenTitle => (super.noSuchMethod(
        Invocation.getter(#detailsScreenTitle),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#detailsScreenTitle),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#detailsScreenTitle),
        ),
      ) as String);

  @override
  String get scanQrCodeInstruction => (super.noSuchMethod(
        Invocation.getter(#scanQrCodeInstruction),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#scanQrCodeInstruction),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#scanQrCodeInstruction),
        ),
      ) as String);

  @override
  String get scanningForQrCode => (super.noSuchMethod(
        Invocation.getter(#scanningForQrCode),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#scanningForQrCode),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#scanningForQrCode),
        ),
      ) as String);

  @override
  String get qrCodeDetected => (super.noSuchMethod(
        Invocation.getter(#qrCodeDetected),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#qrCodeDetected),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#qrCodeDetected),
        ),
      ) as String);

  @override
  String get buttonShukkin => (super.noSuchMethod(
        Invocation.getter(#buttonShukkin),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#buttonShukkin),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#buttonShukkin),
        ),
      ) as String);

  @override
  String get buttonTaikin => (super.noSuchMethod(
        Invocation.getter(#buttonTaikin),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#buttonTaikin),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#buttonTaikin),
        ),
      ) as String);

  @override
  String get buttonKyukeiKaishi => (super.noSuchMethod(
        Invocation.getter(#buttonKyukeiKaishi),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#buttonKyukeiKaishi),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#buttonKyukeiKaishi),
        ),
      ) as String);

  @override
  String get buttonKyukeiOwari => (super.noSuchMethod(
        Invocation.getter(#buttonKyukeiOwari),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#buttonKyukeiOwari),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#buttonKyukeiOwari),
        ),
      ) as String);

  @override
  String get qrCodeLabel => (super.noSuchMethod(
        Invocation.getter(#qrCodeLabel),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#qrCodeLabel),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#qrCodeLabel),
        ),
      ) as String);

  @override
  String get noQrCodeOption => (super.noSuchMethod(
        Invocation.getter(#noQrCodeOption),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#noQrCodeOption),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#noQrCodeOption),
        ),
      ) as String);

  @override
  String get enterIdHint => (super.noSuchMethod(
        Invocation.getter(#enterIdHint),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#enterIdHint),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#enterIdHint),
        ),
      ) as String);

  @override
  String get enterNameHint => (super.noSuchMethod(
        Invocation.getter(#enterNameHint),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#enterNameHint),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#enterNameHint),
        ),
      ) as String);

  @override
  String get confirmButton => (super.noSuchMethod(
        Invocation.getter(#confirmButton),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#confirmButton),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#confirmButton),
        ),
      ) as String);

  @override
  String get idEmptyError => (super.noSuchMethod(
        Invocation.getter(#idEmptyError),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#idEmptyError),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#idEmptyError),
        ),
      ) as String);

  @override
  String get nameEmptyError => (super.noSuchMethod(
        Invocation.getter(#nameEmptyError),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#nameEmptyError),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#nameEmptyError),
        ),
      ) as String);

  @override
  String get snackbarSuccessTitle => (super.noSuchMethod(
        Invocation.getter(#snackbarSuccessTitle),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#snackbarSuccessTitle),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#snackbarSuccessTitle),
        ),
      ) as String);

  @override
  String get snackbarAttendanceRecorded => (super.noSuchMethod(
        Invocation.getter(#snackbarAttendanceRecorded),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#snackbarAttendanceRecorded),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#snackbarAttendanceRecorded),
        ),
      ) as String);

  @override
  String get snackbarErrorTitle => (super.noSuchMethod(
        Invocation.getter(#snackbarErrorTitle),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#snackbarErrorTitle),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#snackbarErrorTitle),
        ),
      ) as String);

  @override
  String get snackbarInvalidQrCodeFormat => (super.noSuchMethod(
        Invocation.getter(#snackbarInvalidQrCodeFormat),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#snackbarInvalidQrCodeFormat),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#snackbarInvalidQrCodeFormat),
        ),
      ) as String);

  @override
  String get snackbarSyncComplete => (super.noSuchMethod(
        Invocation.getter(#snackbarSyncComplete),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#snackbarSyncComplete),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#snackbarSyncComplete),
        ),
      ) as String);

  @override
  String get snackbarAllPendingRecordsSynced => (super.noSuchMethod(
        Invocation.getter(#snackbarAllPendingRecordsSynced),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#snackbarAllPendingRecordsSynced),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#snackbarAllPendingRecordsSynced),
        ),
      ) as String);
}

/// A class which mocks [AttendanceRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAttendanceRepository extends _i1.Mock
    implements _i22.AttendanceRepository {
  @override
  _i9.Future<int> saveAttendanceRecord(
          _i11.AttendanceRecordsCompanion? entry) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveAttendanceRecord,
          [entry],
        ),
        returnValue: _i9.Future<int>.value(0),
        returnValueForMissingStub: _i9.Future<int>.value(0),
      ) as _i9.Future<int>);

  @override
  _i9.Future<List<_i11.AttendanceRecord>> getAllAttendanceRecords() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllAttendanceRecords,
          [],
        ),
        returnValue: _i9.Future<List<_i11.AttendanceRecord>>.value(
            <_i11.AttendanceRecord>[]),
        returnValueForMissingStub:
            _i9.Future<List<_i11.AttendanceRecord>>.value(
                <_i11.AttendanceRecord>[]),
      ) as _i9.Future<List<_i11.AttendanceRecord>>);

  @override
  _i9.Future<List<_i11.AttendanceRecord>> getUnsyncedAttendanceRecords() =>
      (super.noSuchMethod(
        Invocation.method(
          #getUnsyncedAttendanceRecords,
          [],
        ),
        returnValue: _i9.Future<List<_i11.AttendanceRecord>>.value(
            <_i11.AttendanceRecord>[]),
        returnValueForMissingStub:
            _i9.Future<List<_i11.AttendanceRecord>>.value(
                <_i11.AttendanceRecord>[]),
      ) as _i9.Future<List<_i11.AttendanceRecord>>);

  @override
  _i9.Future<void> markAsSynced(_i11.AttendanceRecord? record) =>
      (super.noSuchMethod(
        Invocation.method(
          #markAsSynced,
          [record],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}
